#+TITLE: Emacs configuration
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

This is my personal Emacs configuration file

* About running on Windows
** Home
   Emacs has some very strange defaults with regards to what it considers the Home directory on Windows, make sure to set the =HOME= to your user directory
** Icons
   When installing =all-the-icons= it will prompt for a font installation directory, pick whatever and then manually install the fonts it just downloaded

* Init
** Package repositories
   Setup the default package repositories used by this config
   
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   
   (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
   
   (setq package-enable-at-startup nil)
   (package-initialize)
   #+END_SRC

** Disable GUI
   I don't use the toolbar and menu bar at all, so hide them to give more screen real estate to the editor

   #+BEGIN_SRC emacs-lisp
   (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
   (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
   (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))   
   #+END_SRC

** use-package

   This installs the ~use-package~ package, that will make installing and 
   managing packages in this config much cleaner

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   
   (eval-when-compile
     (require 'use-package))
   #+END_SRC
   
   Now to ensure a package is installed you simply use ~(use-package name-of-the-package :ensure t)~, easy!

** Dashboard
   Uses the ~emacs-dashboard~ package for a pretty start screen featuring recent projects and files

   #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (setq dashboard-startup-banner 'logo)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-show-shortcuts nil)

  (setq dashboard-items '((projects  . 5)
                          (recents . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5)))

   #+END_SRC

* Appearence
** Startup
   Maximize screen, so we get the prettier startup screen but also because we extremely rarley want a screen as small as the default
   #+BEGIN_SRC emacs-lisp
   (toggle-frame-maximized)
   #+END_SRC
   
   Install =all-the-icons=, used by various other plugins
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons :ensure t)
   (unless (member "all-the-icons" (font-family-list))
     (all-the-icons-install-fonts t))
   #+END_SRC

** Theme
   For the theme we are using zenburn
   #+BEGIN_SRC emacs-lisp
   (use-package zenburn-theme :ensure t)
   (load-theme 'zenburn t)
   #+END_SRC
   
   Modify the appearance of highlighted text to make it actually readable
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'region nil :background "#333" :foreground "#ffffff")
   #+END_SRC

** Modeline 
   [[https://github.com/seagle0128/doom-modeline][doom-modeline]] is "A fancy and fast mode-line inspired by minimalism design"
   
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline 
     :ensure t
     :hook (after-init . doom-modeline-mode))
   #+END_SRC

** Dired 
*** Packages
    Install plugins related to dired
    #+BEGIN_SRC emacs-lisp
    (use-package dired-subtree :ensure t
      :after dired)
    (use-package all-the-icons-dired :ensure t)
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    #+END_SRC

*** General
    Use emulated ls by default, so it is consistent between different OSes
    #+BEGIN_SRC emacs-lisp
    (setq ls-lisp-use-insert-directory-program nil)
    #+END_SRC

    Hide details by default
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode) ; Hide details by default
        ))
    #+END_SRC

*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
      (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
    #+END_SRC

* Evil
** Evil
  [[https://github.com/emacs-evil/evil][Evil]] is The extensible vi layer for Emacs
  
*** Packages
   Install the package

   #+BEGIN_SRC emacs-lisp
   (use-package evil :ensure t)
   #+END_SRC

*** Configuration
   Use Evil mode as default

   #+BEGIN_SRC emacs-lisp
   (evil-mode t)
   #+END_SRC

*** Keybindings
    #+BEGIN_SRC emacs-lisp
    (unbind-key "C-p" evil-normal-state-map) ; Used by Projectile
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up) 
    #+END_SRC

** Leader key
   #+BEGIN_SRC emacs-lisp
   ;; Create the leader keymap
   (defvar paddy-leader-map (make-sparse-keymap)
     "Keymap for \"leader key\" shortcuts.")
   
   ;; Bind the leader key
   (define-key evil-normal-state-map "," paddy-leader-map)
   #+END_SRC
   
   To bind something to the leader map, you can now do something like this:
   =(define-key paddy-leader-map "b" 'list-buffers)=
** evil-easymotion
   Easymotion for Evil mode
   
*** Packages
   #+BEGIN_SRC emacs-lisp
   (use-package evil-easymotion :ensure t)
   #+END_SRC
   
*** Keybindings
   #+BEGIN_SRC emacs-lisp
   (evilem-default-keybindings "SPC")
   #+END_SRC

* General
** Helm
*** Packages
   Install the packages

   #+BEGIN_SRC emacs-lisp
   (use-package helm :ensure t) ; Main helm
   #+END_SRC

*** Keybindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-x") 'helm-M-x)
   #+END_SRC

*** General
   Always open helm in the bottom of the frame
   #+BEGIN_SRC emacs-lisp
   (setq helm-default-display-buffer-functions '(display-buffer-in-side-window))
   #+END_SRC

** Which-key
   =which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

   #+BEGIN_SRC emacs-lisp
   (use-package which-key :ensure t)
   (which-key-mode) ; Activate which-key
   #+END_SRC
   
** Keybindings
   Unbind keys that interefers with the shortcut keys for swedish characters in OSX
   #+BEGIN_SRC emacs-lisp
   (global-unset-key (kbd "M-a"))
   (global-unset-key (kbd "M-u"))
   #+END_SRC
   
   Rebind prev/next buffer keys to use H/L instead of arrow keys
   #+BEGIN_SRC emacs-lisp
   (unbind-key "C-x h" global-map)
   (unbind-key "C-x l" global-map)
   (define-key evil-normal-state-map (kbd "C-x h") 'previous-buffer) 
   (define-key evil-normal-state-map (kbd "C-x l") 'next-buffer) 
   #+END_SRC

* File/Project management
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
   
*** Packages
   Install package and enable Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile :ensure t)   
   (projectile-mode +1)
   #+END_SRC
   
   Install helm integration
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile :ensure t)   
   #+END_SRC

*** Keybindings
   Set keybindings for Projectile
   #+BEGIN_SRC emacs-lisp
   (define-key paddy-leader-map "p" 'projectile-command-map)
   (define-key projectile-command-map "f" 'helm-projectile-find-file)
   (define-key projectile-command-map "p" 'helm-projectile-switch-project)
   #+END_SRC

*** Settings
   With this setting, once you have selected your project, the top-level directory of the project is immediately opened for you in a dired buffer.
   #+BEGIN_SRC emacs-lisp
   (setq projectile-switch-project-action #'projectile-dired)
   #+END_SRC

** Magit
*** Packages
    Install package
    #+BEGIN_SRC emacs-lisp
    (use-package magit :ensure t)   
    (use-package evil-magit :ensure t)   
    #+END_SRC

*** Keybindings
    Give magit a global hotkey
    #+BEGIN_SRC emacs-lisp
    (define-key paddy-leader-map "g" 'magit-status)
    #+END_SRC
    
    Make it work better with Evil mode
    #+BEGIN_SRC emacs-lisp
    (setq evil-magit-state 'normal)
    (setq evil-magit-use-y-for-yank t)
    #+END_SRC
   
* Org
** Agenda
   Load the org files in the designated org folder
   
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files '("~/Dropbox/Org"))
   #+END_SRC
** Appearence
    [[https://github.com/sabof/org-bullets][org-bullets]] adds pretty bullets to org mode

    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets :ensure t)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+END_SRC

** Export
*** Html
   Htmlize allows for html export of org documents

   #+BEGIN_SRC emacs-lisp
   (use-package htmlize :ensure t)
   #+END_SRC

   
   
