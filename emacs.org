#+TITLE: Emacs configuration
#+SETUPFILE: https://raw.githubusercontent.com/PaddyCo/org-html-themes/master/setup/theme-readtheorg.setup
This is my personal Emacs configuration file

* About running on Windows
** Home
   Emacs has some very strange defaults with regards to what it considers the Home directory on Windows, make sure to set the =HOME= to your user directory
** Icons
   When installing =all-the-icons= it will prompt for a font installation directory, pick whatever and then manually install the fonts it just downloaded


* Init
** Package repositories
   Setup the default package repositories used by this config
   
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   
   (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
   
   (setq package-enable-at-startup nil)
   (package-initialize)
   #+END_SRC

** Disable GUI
   I don't use the toolbar and menu bar at all, so hide them to give more screen real estate to the editor

   #+BEGIN_SRC emacs-lisp
   (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
   (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
   (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))   
   #+END_SRC

** use-package

   This installs the ~use-package~ package, that will make installing and 
   managing packages in this config much cleaner

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   
   (eval-when-compile
     (require 'use-package))
   #+END_SRC
   
   Now to ensure a package is installed you simply use ~(use-package name-of-the-package :ensure t)~, easy!

** Dashboard
   Uses the ~emacs-dashboard~ package for a pretty start screen featuring recent projects and files

   #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (setq dashboard-startup-banner 'logo)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-show-shortcuts nil)

  (setq dashboard-items '((projects  . 5)
                          (recents . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5)))

   #+END_SRC

* Appearence
** Startup
   Maximize screen, so we get the prettier startup screen but also because we extremely rarley want a screen as small as the default
   #+BEGIN_SRC emacs-lisp
   (toggle-frame-maximized)
   #+END_SRC
   
   Install =all-the-icons=, used by various other plugins
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons :ensure t)
   (unless (member "all-the-icons" (font-family-list))
     (all-the-icons-install-fonts t))
   #+END_SRC

** Theme
   For the theme we are using one of the doom themes
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes :ensure t)
   (load-theme 'doom-Iosvkem t)
   #+END_SRC
   
   Configure the doom themes to work better with org
   #+BEGIN_SRC emacs-lisp
   (doom-themes-org-config)
   #+END_SRC

** Solaire mode
   Brightens source buffers and dims non-source buffers
   
   #+BEGIN_SRC emacs-lisp
   (use-package solaire-mode
     :ensure t
     :hook
     ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
     (minibuffer-setup . solaire-mode-in-minibuffer)
     :config
     (solaire-global-mode +1)
     (solaire-mode-swap-bg))
   #+END_SRC

   #+RESULTS:
   | solaire-mode-in-minibuffer | rfn-eshadow-setup-minibuffer | minibuffer-history-isearch-setup | minibuffer-history-initialize |

** Modeline 
   [[https://github.com/seagle0128/doom-modeline][doom-modeline]] is "A fancy and fast mode-line inspired by minimalism design"
   
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline 
     :ensure t
     :hook (after-init . doom-modeline-mode))
   #+END_SRC

* Evil
** Evil
  [[https://github.com/emacs-evil/evil][Evil]] is The extensible vi layer for Emacs
  
*** Packages
   Install the package

   #+BEGIN_SRC emacs-lisp
   (use-package evil :ensure t)
   #+END_SRC

*** Configuration
   Use Evil mode as default

   #+BEGIN_SRC emacs-lisp
   (evil-mode t)
   #+END_SRC

*** Keybindings
    #+BEGIN_SRC emacs-lisp
    (unbind-key "C-p" evil-normal-state-map) ; Used by Projectile
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up) 
    #+END_SRC

** evil-easymotion
   Easymotion for Evil mode
   
*** Packages
   #+BEGIN_SRC emacs-lisp
   (use-package evil-easymotion :ensure t)
   #+END_SRC
   
*** Keybindings
   #+BEGIN_SRC emacs-lisp
   (evilem-default-keybindings "SPC")
   #+END_SRC

* File/Project management
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

*** Packages
   Install package and enable Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile :ensure t)   
   (projectile-mode +1)
   #+END_SRC
   
   Install helm integration
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile :ensure t)   
   #+END_SRC

*** Keymap
    #+BEGIN_SRC emacs-lisp
    (defhydra hydra-projectile (:color blue)
      ("q" nil "Quit" :column "Projectile")
      ("p" helm-projectile-switch-project "Switch project" :column "Manage")
      ("f" helm-projectile-find-file "Find file" :column "Project"))
    #+END_SRC
*** Settings
   With this setting, once you have selected your project, the top-level directory of the project is immediately opened for you in a dired buffer.
   #+BEGIN_SRC emacs-lisp
   (setq projectile-switch-project-action 'neotree-projectile-action)
   #+END_SRC

** Magit
*** Packages
    Install package
    #+BEGIN_SRC emacs-lisp
    (use-package magit :ensure t)   
    (use-package evil-magit :ensure t)   
    #+END_SRC

*** Keymap
    Setup a magit hydra

    #+BEGIN_SRC emacs-lisp
    (defhydra hydra-magit (:color blue)
      ("q" nil "Quit" :column "Magit")
      ("s" magit-status "Status" :column "Git")
      ("b" magit-blame "Blame"))
    #+END_SRC

    Make it work better with Evil mode

    #+BEGIN_SRC emacs-lisp
    (setq evil-magit-state 'normal)
    (setq evil-magit-use-y-for-yank t)
    #+END_SRC
   
** Neotree
   Neotree is a file explorer for Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package neotree :ensure t)

   ;; Use icons
   (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
   
   ;; Evil mode bindings
   (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
   (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
   (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
   (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
   (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
   (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
   (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
   (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
   (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
   #+END_SRC

* General
  Set the time locale so it uses english weekdays
  #+BEGIN_SRC emacs-lisp
  (setq system-time-locale "C")
  #+END_SRC
  
  Save all auto save files to a single folder instead of polluting the project directory
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
  #+END_SRC
  
  Disable lockfiles
  #+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  #+END_SRC

** Helm
*** Packages
   Install the packages

   #+BEGIN_SRC emacs-lisp
   (use-package helm :ensure t) ; Main helm
   #+END_SRC

*** Keybindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-x") 'helm-M-x)
   #+END_SRC

*** General
   Always open helm in the bottom of the frame
   #+BEGIN_SRC emacs-lisp
   (setq helm-default-display-buffer-functions '(display-buffer-in-side-window))
   #+END_SRC

** Hydra
   #+BEGIN_SRC emacs-lisp
   (use-package hydra :ensure t)
   #+END_SRC
** Which-key
   =which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

   #+BEGIN_SRC emacs-lisp
   (use-package which-key :ensure t)
   (which-key-mode) ; Activate which-key
   #+END_SRC
   
** Keybindings
   Unbind keys that interefers with the shortcut keys for swedish characters in OSX
   #+BEGIN_SRC emacs-lisp
   (global-unset-key (kbd "M-a"))
   (global-unset-key (kbd "M-u"))
   #+END_SRC
   
   Rebind prev/next buffer keys to use H/L instead of arrow keys
   #+BEGIN_SRC emacs-lisp
   (unbind-key "C-x h" global-map)
   (unbind-key "C-x l" global-map)
   (define-key evil-normal-state-map (kbd "C-x h") 'previous-buffer) 
   (define-key evil-normal-state-map (kbd "C-x l") 'next-buffer) 
   #+END_SRC
   
* File formats
** Org
*** Evil
  #+BEGIN_SRC emacs-lisp
  (use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
  #+END_SRC

*** Agenda
   Load the org files in the designated org folder
   
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files '("~/Dropbox/Org"))
   #+END_SRC

*** Capture templates
    
    #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/Org/home.org" "Capture")
             "* TODO %^{Description}\n  -  %?\n  :LOGBOOK:\n  - Added: %U\n  :END:")
	("d" "Daily task" checkitem (file+olp+datetree "~/Dropbox/Org/daily.org")
             "- [ ] %? %a %U")
        ("j" "Journal" item (file+olp+datetree "~/Dropbox/Org/journal.org")
             "- %? %U")))
    #+END_SRC

    #+RESULTS:
    | t | Todo | entry | (file+headline ~/Dropbox/Org/home.org Capture) | * TODO %^{Description} |
   
*** Appearence
    [[https://github.com/sabof/org-bullets][org-bullets]] adds pretty bullets to org mode

    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets :ensure t)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+END_SRC

*** Configuration
    #+BEGIN_SRC emacs-lisp
    (setq org-log-into-drawer t)    
    (setq org-log-done t)
    #+END_SRC

*** Export
**** Html
   Htmlize allows for html export of org documents

   #+BEGIN_SRC emacs-lisp
   (use-package htmlize :ensure t)
   #+END_SRC

*** Keymap
    Setup a Org mode hydra

    #+BEGIN_SRC emacs-lisp
    ; Org hydra
    (defhydra hydra-org (:color blue)
      ("q" nil "Quit" :column "Org mode")
      ("t" org-todo "Todo" :column "Todo")
      ("n" org-add-note "Add Note")
      ("c" hydra-clock/body "Clock")
      ("T" org-set-tags-command "Tag")
      ("A" org-archive-subtree-default "Archive")
      ("p" org-capture "Capture" :column "Organizing")
      ("r" org-refile "Refile")
      ("a" org-agenda "Agenda" :column "Schedule")
      ("s" org-schedule "Schedule")
      ("d" org-deadline "Deadline")
      ("e" org-export-dispatch "Export" :column "Misc")
      ("o" org-open-at-point "Follow link")
    )

    ; Clock hydra
    (defhydra hydra-clock (:color blue)
      ("q" nil "Quit" :column "Org-Clock")
      ("i" org-clock-in "In" :column "Task")
      ("o" org-clock-out "Out")
      ("j" org-clock-goto "Jump to current clock")
      ("e" org-clock-modify-effort-estimate "Effort")
      ("c" org-clock-cancel "Cancel" :color pink)
      ("d" org-clock-display "Display" :column "Misc")
      ("r" org-clock-report "Report"))
    #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :ensure t
     :commands (markdown-mode gfm-mode)
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "multimarkdown"))
   #+END_SRC

* Keymap
  Creating the leader hydra

  #+BEGIN_SRC emacs-lisp
   (defhydra hydra-leader (:color blue)
     ("q" nil "Quit" :column "Leader")
     ("x" helm-M-x "Execute command" :column "General")
     ("t" neotree-toggle "Filetree")
     ("b" helm-buffers-list "Buffers list")
     ("g" hydra-magit/body "Git" :column "Menus")
     ("o" hydra-org/body "Org")
     ("p" hydra-projectile/body "Project")
   )
  #+END_SRC

  Bind leader hydra to leader key

  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "," 'hydra-leader/body)
  #+END_SRC
